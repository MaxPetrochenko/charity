/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface FundraisingV1Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "MANAGER_ROLE"
      | "addManagers"
      | "approvals"
      | "approveFundraising"
      | "approveWithdrawal"
      | "donate"
      | "donations"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "managers"
      | "managersCount"
      | "nft"
      | "onERC721Received"
      | "registerFundrasing"
      | "removeManagers"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "withdrawFundraising"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Donated"
      | "FundRaised"
      | "ManagerRemoved"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addManagers",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "approvals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveFundraising",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "approveWithdrawal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donate",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "managers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "managersCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nft", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerFundrasing",
    values: [BigNumberish, AddressLike, AddressLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeManagers",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFundraising",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approvals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveFundraising",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "donations", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "managers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "managersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerFundrasing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFundraising",
    data: BytesLike
  ): Result;
}

export namespace DonatedEvent {
  export type InputTuple = [
    donationId: BigNumberish,
    totalTransferred: BigNumberish
  ];
  export type OutputTuple = [donationId: bigint, totalTransferred: bigint];
  export interface OutputObject {
    donationId: bigint;
    totalTransferred: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundRaisedEvent {
  export type InputTuple = [fundraisingId: BigNumberish];
  export type OutputTuple = [fundraisingId: bigint];
  export interface OutputObject {
    fundraisingId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ManagerRemovedEvent {
  export type InputTuple = [removedManager: AddressLike];
  export type OutputTuple = [removedManager: string];
  export interface OutputObject {
    removedManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FundraisingV1 extends BaseContract {
  connect(runner?: ContractRunner | null): FundraisingV1;
  waitForDeployment(): Promise<this>;

  interface: FundraisingV1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  addManagers: TypedContractMethod<
    [_managers: AddressLike[]],
    [void],
    "nonpayable"
  >;

  approvals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint] & {
        managerApprovals: bigint;
        withdrawalApprovals: bigint;
      }
    ],
    "view"
  >;

  approveFundraising: TypedContractMethod<
    [_fundraisingId: BigNumberish, isApproved: boolean],
    [bigint],
    "nonpayable"
  >;

  approveWithdrawal: TypedContractMethod<
    [_fundraisingId: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  donate: TypedContractMethod<
    [
      _fundraisingId: BigNumberish,
      _tokenAddress: AddressLike,
      _amount: BigNumberish
    ],
    [void],
    "payable"
  >;

  donations: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, string, bigint] & {
        totalNeeded: bigint;
        totalTransferred: bigint;
        tokenAddress: string;
        withdrawalAddress: string;
        state: bigint;
      }
    ],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  managers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  managersCount: TypedContractMethod<[], [bigint], "view">;

  nft: TypedContractMethod<[], [string], "view">;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;

  registerFundrasing: TypedContractMethod<
    [
      _totalNeeded: BigNumberish,
      _tokenAddress: AddressLike,
      _withdrawalAddress: AddressLike,
      _withdrawalApprovers: AddressLike[]
    ],
    [bigint],
    "nonpayable"
  >;

  removeManagers: TypedContractMethod<
    [_managers: AddressLike[]],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  withdrawFundraising: TypedContractMethod<
    [_fundraisingId: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addManagers"
  ): TypedContractMethod<[_managers: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approvals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint] & {
        managerApprovals: bigint;
        withdrawalApprovals: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "approveFundraising"
  ): TypedContractMethod<
    [_fundraisingId: BigNumberish, isApproved: boolean],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveWithdrawal"
  ): TypedContractMethod<
    [_fundraisingId: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "donate"
  ): TypedContractMethod<
    [
      _fundraisingId: BigNumberish,
      _tokenAddress: AddressLike,
      _amount: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "donations"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, string, bigint] & {
        totalNeeded: bigint;
        totalTransferred: bigint;
        tokenAddress: string;
        withdrawalAddress: string;
        state: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "managers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "managersCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nft"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerFundrasing"
  ): TypedContractMethod<
    [
      _totalNeeded: BigNumberish,
      _tokenAddress: AddressLike,
      _withdrawalAddress: AddressLike,
      _withdrawalApprovers: AddressLike[]
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeManagers"
  ): TypedContractMethod<[_managers: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "withdrawFundraising"
  ): TypedContractMethod<
    [_fundraisingId: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "Donated"
  ): TypedContractEvent<
    DonatedEvent.InputTuple,
    DonatedEvent.OutputTuple,
    DonatedEvent.OutputObject
  >;
  getEvent(
    key: "FundRaised"
  ): TypedContractEvent<
    FundRaisedEvent.InputTuple,
    FundRaisedEvent.OutputTuple,
    FundRaisedEvent.OutputObject
  >;
  getEvent(
    key: "ManagerRemoved"
  ): TypedContractEvent<
    ManagerRemovedEvent.InputTuple,
    ManagerRemovedEvent.OutputTuple,
    ManagerRemovedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "Donated(uint256,uint256)": TypedContractEvent<
      DonatedEvent.InputTuple,
      DonatedEvent.OutputTuple,
      DonatedEvent.OutputObject
    >;
    Donated: TypedContractEvent<
      DonatedEvent.InputTuple,
      DonatedEvent.OutputTuple,
      DonatedEvent.OutputObject
    >;

    "FundRaised(uint256)": TypedContractEvent<
      FundRaisedEvent.InputTuple,
      FundRaisedEvent.OutputTuple,
      FundRaisedEvent.OutputObject
    >;
    FundRaised: TypedContractEvent<
      FundRaisedEvent.InputTuple,
      FundRaisedEvent.OutputTuple,
      FundRaisedEvent.OutputObject
    >;

    "ManagerRemoved(address)": TypedContractEvent<
      ManagerRemovedEvent.InputTuple,
      ManagerRemovedEvent.OutputTuple,
      ManagerRemovedEvent.OutputObject
    >;
    ManagerRemoved: TypedContractEvent<
      ManagerRemovedEvent.InputTuple,
      ManagerRemovedEvent.OutputTuple,
      ManagerRemovedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
