/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type RewardDataStruct = {
  tokenAddress: AddressLike;
  hasLockPeriod: boolean;
  amount: BigNumberish;
  unlocksAt: BigNumberish;
  lockPeriod: BigNumberish;
};

export type RewardDataStructOutput = [
  tokenAddress: string,
  hasLockPeriod: boolean,
  amount: bigint,
  unlocksAt: bigint,
  lockPeriod: bigint
] & {
  tokenAddress: string;
  hasLockPeriod: boolean;
  amount: bigint;
  unlocksAt: bigint;
  lockPeriod: bigint;
};

export interface IRewardPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addRewardToPool"
      | "getRewardPerCycle"
      | "transferRewardToUser"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addRewardToPool",
    values: [RewardDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardPerCycle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferRewardToUser",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addRewardToPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardPerCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferRewardToUser",
    data: BytesLike
  ): Result;
}

export interface IRewardPool extends BaseContract {
  connect(runner?: ContractRunner | null): IRewardPool;
  waitForDeployment(): Promise<this>;

  interface: IRewardPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addRewardToPool: TypedContractMethod<
    [rewardData: RewardDataStruct],
    [void],
    "nonpayable"
  >;

  getRewardPerCycle: TypedContractMethod<
    [tokenAddress: AddressLike],
    [bigint],
    "view"
  >;

  transferRewardToUser: TypedContractMethod<
    [tokenAddress: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addRewardToPool"
  ): TypedContractMethod<[rewardData: RewardDataStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getRewardPerCycle"
  ): TypedContractMethod<[tokenAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferRewardToUser"
  ): TypedContractMethod<
    [tokenAddress: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
